namespace TicTacToeGame
{
    internal class Board
    { 
        private char[,] board;

        // инициализираме дъската с празни места 
        public Board()
        {
            board = new char[3, 3];
            for (int i = 0; i < 3; i++)
            {
                for (int j = 0; j < 3; j++)
                {
                   board[i, j] = ' ';
                }
            }
        }
        public bool IsValidMove(int row, int col)
        {
            return row >= 0 
                && row < 3 
                && col >= 0 
                && col < 3 
                && board[row, col] == ' ';
        }
        public void MakeMove(int row, int col, char symbol)
        {
            board[row, col] = symbol;
        }
        public char CheckWinner()
        {
            //хоризонтални редове
            for (int i = 0; i < 3; i++)
            {
                if (board[i, 0] != ' '
                    && board[i, 0] == board[i, 1]
                    && board[i, 1] == board[i, 2])
                {
                    return board[i, 0];
                }
                    
            }
            // вертикални колони
            for (int j = 0; j < 3; j++)
            {
                if (board[0, j] != ' '
                    && board[0, j] == board[1, j]
                    && board[1, j] == board[2, j])
                {
                    return board[0, j];
                }
            }
            //диагонали
            if (board[0, 0] != ' '
                && board[0, 0] == board[1, 1]
                && board[1, 1] == board[2, 2])
            { 
                return board[0, 0];
            }

            if (board[0, 2] != ' '
                && board[0, 2] == board[1, 1]
                && board[1, 1] == board[2, 0])
            {
                return board[0, 2]; 
            }
            return ' ';
        }
        public bool IsFullBoard()
        {
            for (int i = 0; i < 3; i++)
            {
                for (int j = 0; j < 3; j++)
                {
                    if (board[i, j] == ' ')
                   return false;
                }
            }
            return true;
        }
        public void PrintBoard()
        {
            Console.WriteLine("  0 1 2");
            for (int i = 0; i < 3; i++)
            {
                Console.Write(i + " ");
                for (int j = 0; j < 3; j++)
                {
                    Console.Write(board[i, j]);
                    if (j < 2)
                        Console.Write("|");
                }
                Console.WriteLine();
                if (i < 2)
                    Console.WriteLine("  -----");
            }
        }
    }
internal class Player
    {
        private char symbol;
        public Player(char symbol)
        {
            this.symbol = symbol;
        }

        // връща символа на играча
        public char GetSymbol()
        {
            return symbol;
        }
        public void MakeMove(Board board)
        {
            // четем координати от конзолата, докато не въведе валидни
            int row, col;
            do
            {
                Console.WriteLine("Player {0}, enter row and column:", symbol);
                row = int.Parse(Console.ReadLine());
                col = int.Parse(Console.ReadLine());
            }
            while (!board.IsValidMove(row, col));

            // Поставя символа на играча на дъската
            board.MakeMove(row, col, symbol);
        }
    }
internal class Game
    {
        private Board board;
        private Player playerX, playerO;
        public Game()
        {
            board = new Board();
            playerX = new Player('X');
            playerO = new Player('O');
        }
        public void StartTheGame()
        {
            Player currentPlayer = playerX;

            while (true)
            {
                board.PrintBoard();

                // ход на играча
                currentPlayer.MakeMove(board);

                char winner = board.CheckWinner();

                //има победител, извежда го и прекратява играта
                if (winner != ' ')
                {
                    Console.WriteLine("Player {0} wins!", winner);
                    break;
                }

                // дали дъската е пълна
                if (board.IsFullBoard())
                { 
                    Console.WriteLine("It's a tie!");
                    break;
                }

                // сменяме текущия играч
                if (currentPlayer == playerX)
                {
                    currentPlayer = playerO;
                }

                else
                {
                   currentPlayer = playerX;
                }
            }

            // Извежда крайното състояние на дъската
            board.PrintBoard();
        }
    }
  internal class Program
    {
        static void Main(string[] args)
        {
            Game game = new Game();
            game.StartTheGame();
        }
    }
}
